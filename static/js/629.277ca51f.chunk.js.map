{"version":3,"file":"static/js/629.277ca51f.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactList/ContactItem/ContactItem.styled.js","components/ContactList/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","views/ContactsView.jsx"],"sourcesContent":["import styled from \"styled-components\";\nimport { Field, Form } from 'formik';\n\nexport const FormStyled = styled(Form)`\n    display: flex;\n    flex-direction: column;\n    gap: 12px;\n    width: 400px;\n    padding: 16px;\n    border: 2px solid black;\n`\n\nexport const Input = styled(Field)`\n    padding: 8px;\n    width: 200px;\n    font-size: large;\n    outline: none;\n    border-radius: 8px;\n    :focus {\n        outline: 1px solid blue;\n    }\n`\n\nexport const Button = styled.button`\n    width: max-content;\n    padding: 4px;\n    font-family: inherit;\n    font-size: medium;\n    border-radius: 8px;\n`","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contactList;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contactList, filter) => {\n    return contactList.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { Formik } from 'formik';\nimport { Button, FormStyled, Input } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Notiflix from 'notiflix';\nimport { selectContacts } from 'redux/contacts/contacts-selectors';\nimport { addContact } from 'redux/contacts/contacts-operation';\nimport { nanoid } from '@reduxjs/toolkit';\n\nconst inithialValue = {\n  name: '',\n  number: '',\n};\n\nconst ContactForm = () => {\n  const contactList = useSelector(selectContacts);\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = (value, { resetForm }) => {\n    const existingContact = contactList.some(\n      contact => contact.number === value.number\n    );\n\n    if (existingContact) {\n      Notiflix.Notify.failure(\n        `Сontact with number ${value.number} is already in contacts`\n      );\n    } else {\n      dispatch(addContact({ ...value, id: nanoid() }));\n      Notiflix.Notify.success('Add contacts');\n    }\n\n    resetForm();\n  };\n\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <Formik initialValues={inithialValue} onSubmit={handleSubmit}>\n        <FormStyled>\n          <label htmlFor=\"name\">Name</label>\n          <Input\n            type=\"text\"\n            name=\"name\"\n            // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            // title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n          <label htmlFor=\"number\">Number</label>\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            // title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n          <Button type=\"submit\">Add contact</Button>\n        </FormStyled>\n      </Formik>\n    </>\n  );\n};\n\nexport default ContactForm;\n","import styled from \"styled-components\";\n\nexport const FilterForm = styled.div`\n    display: flex;\n    flex-direction: column;\n    gap: 12px;\n`\n\nexport const Input = styled.input`\n    padding: 4px;\n    width: 200px;\n    font-size: large;\n    outline: none;\n    border-radius: 8px;\n    :focus {\n        outline: 1px solid blue;\n    }\n`","import { FilterForm, Input } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilters } from 'redux/filtersSlice';\nimport { selectFilter } from 'redux/contacts/contacts-selectors';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n  const handleChangeFilter = e => dispatch(setFilters(e.target.value));\n\n  return (\n    <FilterForm>\n      <label htmlFor=\"filter\">Find contacts by name</label>\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={handleChangeFilter}\n      />\n    </FilterForm>\n  );\n};\n\nexport default Filter;\n","import styled from \"styled-components\";\n\nexport const Contact = styled.li`\n    margin-top: 12px;\n`","import { Button } from 'components/ContactForm/ContactForm.styled';\nimport PropTypes from 'prop-types';\nimport { Contact } from './ContactItem.styled';\nimport { useDispatch } from 'react-redux';\nimport Notiflix from 'notiflix';\nimport { deleteContact } from 'redux/contacts/contacts-operation';\n\nconst ContactItem = ({ id, name, phone }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = () => {\n    dispatch(deleteContact(id));\n    Notiflix.Notify.success(`Contact ${name} delete`);\n  };\n\n  return (\n    <Contact id={id}>\n      {name}: {phone}{' '}\n      <Button type=\"button\" onClick={handleDelete}>\n        Delete\n      </Button>\n    </Contact>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n};\n\nexport default ContactItem;\n","import Filter from 'components/Filter/Filter';\nimport ContactItem from './ContactItem';\nimport { useSelector } from 'react-redux';\nimport {\n  selectError,\n  selectIsLoading,\n  selectVisibleContacts,\n} from 'redux/contacts/contacts-selectors';\n\nconst ContactList = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <>\n      <h2>Contacts</h2>\n      <ul>\n        {visibleContacts.length !== 0 && <Filter />}\n        {isLoading && !error && <b>Request in progress...</b>}\n        {visibleContacts.map(({ id, name, phone }) => (\n          <ContactItem key={id} id={id} name={name} phone={phone} />\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default ContactList;\n","import ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\n\nconst ContactsView = () => {\n  return (\n    <div>\n      <ContactForm />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default ContactsView;\n"],"names":["FormStyled","styled","Form","Input","Field","Button","selectContacts","state","contacts","contactList","selectFilter","filter","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","contact","name","toLowerCase","includes","inithialValue","number","useSelector","dispatch","useDispatch","initialValues","onSubmit","value","resetForm","some","Notiflix","addContact","id","nanoid","htmlFor","type","required","FilterForm","onChange","e","setFilters","target","Contact","phone","onClick","deleteContact","visibleContacts","length","map"],"sourceRoot":""}